load smt .

fmod SYM-REAL is
  pr REAL .
  pr REAL-INTEGER .

  vars tt1 tt2 tt3 : TimeSym .
  vars tr1 tr2 tr0 : TSymReal .
  var r : Real .
  var b : Boolean .

  sort TimeSym TSymReal .
  subsort TimeSym Real < TSymReal .

  op _<=_ : TSymReal TSymReal -> Boolean  [ditto] .
  op _>=_ : TSymReal TSymReal -> Boolean  [ditto] .
  op _>_ : TSymReal TSymReal -> Boolean [ditto] .
  op _<_ : TSymReal TSymReal -> Boolean [ditto] .
  op _===_ : TSymReal TSymReal -> Boolean [ditto] .
  op _=/==_ : TSymReal TSymReal -> Boolean [ditto] .

  op -_ : TSymReal -> TSymReal [ditto] .
  op _+_ : TSymReal TSymReal -> TSymReal [ditto] .
  op _*_ : TSymReal TSymReal -> TSymReal [ditto] .
  op _-_ : TSymReal TSymReal -> TSymReal [ditto] .
  op _/_ : TSymReal TSymReal -> TSymReal [ditto] .
  op _?_:_ : Boolean TSymReal TSymReal -> TSymReal [ditto] .

  op toReal : TimeSym -> TSymReal [ctor] .
  op toInt : TSymReal -> TimeSym [ctor] .

  op tsubr : TimeSym TSymReal TSymReal -> TSymReal .
  op tsubb : TimeSym TSymReal Boolean -> Boolean .

  eq tsubr(tt1,tr0,tt1) = tr0 .
  eq tsubr(tt1,tr0,- tr1) = - tsubr(tt1,tr0,tr1) .
  eq tsubr(tt1,tr0,tr1 + tr2) =
       tsubr(tt1,tr0,tr1) + tsubr(tt1,tr0,tr2) .
  eq tsubr(tt1,tr0,tr1 * tr2) =
       tsubr(tt1,tr0,tr1) * tsubr(tt1,tr0,tr2) .
  eq tsubr(tt1,tr0,tr1 - tr2) =
       tsubr(tt1,tr0,tr1) - tsubr(tt1,tr0,tr2) .
  eq tsubr(tt1,tr0,tr1 / tr2) =
       tsubr(tt1,tr0,tr1) / tsubr(tt1,tr0,tr2) .
  eq tsubr(tt1,tr0,b ? tr1 : tr2) =
       tsubb(tt1,tr0,b) ?
         tsubr(tt1,tr0,tr1) : tsubr(tt1,tr0,tr2) .
  eq tsubr(tt1,tr0,toReal(toInt(tr1))) =
     toReal(toInt(tsubr(tt1,tr0,tr1))) .
  eq tsubr(tt1,tr0,tr1) = tr1 [owise] .

  eq tsubb(tt1,tr0,tr1 <= tr2) =
    tsubr(tt1,tr0,tr1) <= tsubr(tt1,tr0,tr2) .
  eq tsubb(tt1,tr0,tr1 >= tr2) =
    tsubr(tt1,tr0,tr1) >= tsubr(tt1,tr0,tr2) .
  eq tsubb(tt1,tr0,tr1 > tr2) =
    tsubr(tt1,tr0,tr1) > tsubr(tt1,tr0,tr2) .
  eq tsubb(tt1,tr0,tr1 === tr2) =
    tsubr(tt1,tr0,tr1) === tsubr(tt1,tr0,tr2) .
  eq tsubb(tt1,tr0,tr1 =/== tr2) =
    tsubr(tt1,tr0,tr1) =/== tsubr(tt1,tr0,tr2) .
  eq tsubb(tt1,tr0,b) = b [owise] .

    --- Assuming that r is positive!
  op simplify : Boolean -> Boolean .
  eq simplify(false and b) = false .
  eq simplify((tt1 > tt1 + r) and b) = false .
  eq simplify((tt1 >= tt1 + r) and b) = false .
  eq simplify((tt1 + r < tt1) and b) = false .
  eq simplify((tt1 + r <= tt1) and b) = false .
  eq simplify((tt1 === tt1 + r) and b) = false .
  eq simplify((tt1 <= tt1 + r) and b) = simplify(b) .
  eq simplify((tt1 < tt1 + r) and b) = simplify(b) .
  eq simplify((tt1 + r > tt1) and b) = simplify(b) .
  eq simplify((tt1 + r >= tt1) and b) = simplify(b) .
  eq simplify((tt1 === tt1) and b) = simplify(b) .
  eq simplify((tt1 === tt2 + 0/1) and b) = simplify((tt1 === tt2) and b) .
  eq simplify((tt1 >= tt2 + 0/1) and b) = tt1 >= tt2 and b .
  eq simplify((tt1 > tt2 + 0/1) and b) = tt1 > tt2 and b .
  eq simplify((tt1 >= tt2 + r) and (tt1 >= tt2) and b) =
             (tt1 >= tt2 + r) and b .
  eq simplify((tt1 >= tt2) and (tt1 >= tt2 + r) and b) =
             (tt1 >= tt2 + r) and b .

  eq simplify(b) = b [owise] .


endfm


fmod SYM-INTEGER is
  pr INTEGER .
  pr REAL-INTEGER .

  vars rr1 rr2 rr3 : RSym .
  vars ri1 ri2 ri3 : RSymInt .
  var int : Integer .
  var b : Boolean .

  sorts RSym RSymInt RSymIntL .
  subsort RSym Integer < RSymInt .
  subsort RSymInt < RSymIntL .
  op nil : -> RSymIntL [ctor] .
  op _;_ : RSymIntL RSymIntL -> RSymIntL [ctor assoc id: nil] .

  op _<=_ : RSymInt RSymInt -> Boolean  [ditto] .
  op _>=_ : RSymInt RSymInt -> Boolean  [ditto] .
  op _>_ : RSymInt RSymInt -> Boolean [ditto] .
  op _<_ : RSymInt RSymInt -> Boolean [ditto] .
  op _===_ : RSymInt RSymInt -> Boolean [ditto] .
  op _=/==_ : RSymInt RSymInt -> Boolean [ditto] .

  op -_ : RSymInt -> RSymInt [ditto] .
  op _+_ : RSymInt RSymInt -> RSymInt [ditto] .
  op _*_ : RSymInt RSymInt -> RSymInt [ditto] .
  op _-_ : RSymInt RSymInt -> RSymInt [ditto] .
  op _div_ : RSymInt RSymInt -> RSymInt [ditto] .
  ---op _mod_ : RSymInt RSymInt -> RSymInt [ditto] .
  op _?_:_ : Boolean RSymInt RSymInt -> RSymInt [ditto] .

endfm

fmod CONFIG is
  inc SYM-REAL .
  inc SYM-INTEGER .
  pr NAT .
  inc STRING .


--- Service, Intruder, Scheduler and Player identifier
  sorts Sid Iid SchdId Pid .
  subsort Sid Iid SchdId < Pid .
  op S : Nat -> Sid [ctor] .
  op I : Nat -> Iid [ctor] .
  op SC : Nat -> SchdId [ctor] .

  sort Prid . --- Protocol identifier
  sort UPrid . --- unique protocol identifier
  sort PridS .
  subsort Prid < PridS .
  op none : -> PridS [ctor] .
  op __ : PridS PridS -> PridS [ctor assoc comm id: none] .

  sort Nid . --- Node Identifier
  op PR : Nat -> Prid [ctor] .
  op UPR : Prid Nat -> UPrid [ctor] .
  op ND : Nat -> Nid [ctor] .

  op rr : Nat -> RSym .
  op tt : Nat -> TimeSym .
  op tw : Nat -> TimeSym .
  op cur : -> TimeSym .


--- Resources
  sort Rid .
  op R : Nat -> Rid [ctor] .

  sort Resource ResourceS .
  subsort Resource < ResourceS .
  op res : Rid Nat -> Resource  [ctor] . --- identifier and amount of the resource
  op none : -> ResourceS [ctor] .
  op __ : ResourceS ResourceS -> ResourceS [ctor assoc comm id: none] .

--- Messages (Using Sort for now)
  sorts Msg MsgS .
  subsort Msg < MsgS .
  op none : -> MsgS [ctor] .
  op __ : MsgS MsgS -> MsgS [ctor assoc comm id: none] .
  op msg(_;_<-_) : TSymReal UPrid Event -> Msg [ctor] .

  op getTime : Msg -> TSymReal .
  eq getTime(msg(t:TSymReal ; upid:UPrid <- ev:Event)) = t:TSymReal .

--- Events
  sort Event .
  op recover : Pid RSymInt -> Event [ctor] .
  op consume : RSymInt TSymReal -> Event [ctor] .
  op terminate : RSymInt -> Event [ctor] .

--- Protocols  *** version_2
  sorts Node .
  op q<_,_> : RSymInt TSymReal -> Node [ctor] .

  sort NTransition NTransitionS .
  subsort NTransition < NTransitionS .
  op none : -> NTransitionS [ctor] .
  op __ : NTransitionS NTransitionS -> NTransitionS [ctor assoc comm id: none] .
  op <_,_,_> : String Nid RSymInt -> NTransition [ctor] .
  ---  < N1 ? R1, R2 ; T1, T2 --> N2   >

  op TFunction : Prid Nid -> NTransitionS [ctor] . --- Transition function
  op RFunction : Prid Nid -> Node [ctor] . --- Resource function

  sort PExec . --- Protocol Execution
  sort PExecS .
  subsort PExec < PExecS .
  op none : -> PExec [ctor] .
  op __ : PExecS PExecS -> PExecS [ctor assoc comm id: none] .
  op px : UPrid Iid Nid RSymInt -> PExec [ctor] .

--- Players
  sorts Service Intruder  Scheduler Player .
  subsort Service Intruder Scheduler < Player .
  op [_,_|_|_|_] : Sid Nat PExecS PridS RSymInt -> Service [ctor] .
  --- id counter timeout resources
  op [_,_|_|_] : Iid Nat RSymInt TimeSym -> Intruder [ctor] .
  --- id counter recovery actions and resources

--- Configuration
  sort PlayerConf .
  subsort Player < PlayerConf .
  op none : -> PlayerConf [ctor] .
  op __ : PlayerConf PlayerConf -> PlayerConf [ctor assoc comm id: none] .

  sort Marker MSet .
  subsort Marker < MSet .
  op none : -> MSet [ctor] .
  op __ : MSet MSet -> MSet [ ctor assoc comm id: none ] .

  op depleted : Sid RSymIntL TSymReal -> Marker [ctor] .

  sort Config .
  op _@_@_!_@_!_@_@_!_ : PlayerConf TimeSym MsgS MsgS Boolean Boolean MSet Nat Nat -> Config [ctor] .

endfm

mod META-TIME is
  inc CONFIG .
  inc META-LEVEL .
  inc CONVERSION .

  vars tr1 tr2 : TSymReal .
  vars rr1 rr2 : RSymInt .
  vars b1 b2 b : Boolean .
  vars i : Nat .
  vars tr res confT tcT : Term .
  vars res? : [ResultPair] .
  vars res1? : [ResultTriple] .
  var tl : TermList .
  var md : Module .
  vars n n1 : Nat .
  var bl : Bool .

  op mkTimeSymVar : Nat -> Term .
  eq mkTimeSymVar(i) = qid("rv" + string(i,10) + ":Real") .

  op mkRSymVar : Nat -> Term .
  eq mkRSymVar(i) = qid("iv" + string(i,10) + ":Integer") .

  op toVarsR : TSymReal -> Term .
  op toVarsB : Boolean -> Term .
  op toVarsI : RSymInt -> Term .

 eq toVarsR(r:Real) = upTerm(r:Real) .
 eq toVarsR(tt(i)) = mkTimeSymVar(i) .
 eq toVarsR(tw(i)) = mkTimeSymVar(i + 10000) .
 eq toVarsR(- tr1) = '-_[toVarsR(tr1)] .
 eq toVarsR(tr1 + tr2) = '_+_[toVarsR(tr1),toVarsR(tr2)] .
 eq toVarsR(tr1 * tr2) = '_*_[toVarsR(tr1),toVarsR(tr2)] .
 eq toVarsR(tr1 - tr2) = '_-_[toVarsR(tr1),toVarsR(tr2)] .
 eq toVarsR(tr1 / tr2) = '_/_[toVarsR(tr1),toVarsR(tr2)] .
 eq toVarsR(b ? tr1 : tr2) = '_?_:_[toVarsB(b),toVarsR(tr1),toVarsR(tr2)] .
 eq toVarsR(toReal(toInt(tr1))) = 'toReal['toInteger[toVarsR(tr1)]] .

 eq toVarsI(int:Integer) = upTerm(int:Integer) .
 eq toVarsI(rr(i)) = mkRSymVar(i) .
 eq toVarsI(- rr1) = '-_[toVarsI(rr1)] .
 eq toVarsI(rr1 + rr2) = '_+_[toVarsI(rr1),toVarsI(rr2)] .
 eq toVarsI(rr1 * rr2) = '_*_[toVarsI(rr1),toVarsI(rr2)] .
 eq toVarsI(rr1 - rr2) = '_-_[toVarsI(rr1),toVarsI(rr2)] .
 eq toVarsI(rr1 div rr2) = '_div_[toVarsI(rr1),toVarsI(rr2)] .
 eq toVarsI(b ? rr1 : rr2) = '_?_:_[toVarsB(b),toVarsI(rr1),toVarsI(rr2)] .

 eq toVarsB(b) = upTerm(b) [owise] .

 eq toVarsB(tr1 <= tr2) = '_<=_[toVarsR(tr1),toVarsR(tr2)] .
 eq toVarsB(tr1 >= tr2) = '_>=_[toVarsR(tr1),toVarsR(tr2)] .
 eq toVarsB(tr1 < tr2) = '_<_[toVarsR(tr1),toVarsR(tr2)] .
 eq toVarsB(tr1 > tr2) = '_>_[toVarsR(tr1),toVarsR(tr2)] .
 eq toVarsB(tr1 === tr2) = '_===_[toVarsR(tr1),toVarsR(tr2)] .
 eq toVarsB(tr1 =/== tr2) = '_=/==_[toVarsR(tr1),toVarsR(tr2)] .

 eq toVarsB(rr1 <= rr2) = '_<=_[toVarsI(rr1),toVarsI(rr2)] .
 eq toVarsB(rr1 >= rr2) = '_>=_[toVarsI(rr1),toVarsI(rr2)] .
 eq toVarsB(rr1 < rr2) = '_<_[toVarsI(rr1),toVarsI(rr2)] .
 eq toVarsB(rr1 > rr2) = '_>_[toVarsI(rr1),toVarsI(rr2)] .
 eq toVarsB(rr1 === rr2) = '_===_[toVarsI(rr1),toVarsI(rr2)] .
 eq toVarsB(rr1 =/== rr2) = '_=/==_[toVarsI(rr1),toVarsI(rr2)] .

 eq toVarsB(b1 and b2) = '_and_[toVarsB(b1),toVarsB(b2)] .
 eq toVarsB(b1 or b2) = '_or_[toVarsB(b1),toVarsB(b2)] .
 eq toVarsB(b1 xor b2) = '_xor_[toVarsB(b1),toVarsB(b2)] .
 eq toVarsB(b1 implies b2) = '_implies_[toVarsB(b1),toVarsB(b2)] .
 eq toVarsB(b1 === b2) = '_===_[toVarsB(b1),toVarsB(b2)] .
 eq toVarsB(b1 =/== b2) = '_=/==_[toVarsB(b1),toVarsB(b2)] .
 eq toVarsB(b ? b1 : b2) = '_?_:_[toVarsB(b),toVarsB(b1),toVarsB(b2)] .
 eq toVarsB(not b1) = 'not_[toVarsB(b1)] .

endm

mod EXE is
  inc META-TIME .

  var iid : Iid .
  var sid : Sid .
  var pid : Pid .
  var sc : SchdId .
  var schd : Scheduler .
  var resS : ResourceS .
  var r1 r2 : Rid .
  vars i j k l m n n1 n2 n3 band worker : Nat .
  vars b b' b2 b2' b3 b3' b3'' b4 b4' b4'' : Boolean .
  vars timeoutT recovery delay T T1 T2 T3 TRec tNew tOld : TSymReal .
  vars rs1 rs2 rs3 rs4 rs' rs'' rs1' rsm rSym instances rs3k rs2k rs4k rs5k : RSymInt .
  vars msg2 msg3 msg1 : Msg .
  vars msgs msgs2 msgs3 : MsgS .
  var pc pc' : PlayerConf .
  var evt : Event .
  var conf : Config .
  vars pxs pxs' : PExecS .
  vars str str' str'' : String .
  var prid : Prid .
  vars prids prids' : PridS .
  var uprid : UPrid .
  vars nid nid2 nid3 : Nid .
  var bl : Bool .
  var mk : Marker .
  var mks mks' mks'' : MSet .
  var trsn : NTransitionS .
  var rsil : RSymIntL .

op rMin : -> Integer .
op INIT : -> Nid .
op MAXPX : -> Nat .
op putMarker : Config -> MSet .

ceq putMarker( [ sid, i | pxs' | prids' | rs1 ] pc @ T @ msgs ! msgs2 @ b ! b2 @ none @ k ! n1 ) = depleted( sid, rs1, T)
if b3' := ( (rs1 <= rMin) and (b2))
/\ b3 := simplify(b3')
/\ metaCheck(['EXE], toVarsB( b3 )) .

ceq putMarker( [ sid, i | pxs' | prids' | rs1 ] pc @ T @ msgs ! msgs2 @ b ! b2 @ depleted(sid, rsil ,T1) @ k ! n1 ) = depleted(sid, rsil ; rs1 ,T1)
if b3' := toBoolean( rsil ; rs1, b2)
/\ b3 := simplify(b3')
/\ metaCheck(['EXE], toVarsB( b3)) .

eq putMarker( pc @ T @ msgs ! msgs2 @ b ! b2 @ mks @ k ! n1 ) = none [owise] .

op toBoolean : RSymIntL Boolean -> Boolean .
eq toBoolean( rs1 ; rsil , b ) = toBoolean( rsil, ((rs1 <= rMin) and (b))) .
eq toBoolean( nil, b) = b .

op advanceTime : TimeSym MsgS Boolean -> Boolean .
eq advanceTime(tNew,msg1 msgs,b) = (tNew < getTime(msg1)) and advanceTime(tNew,msgs,b) .
eq advanceTime(tNew,none,b) = b .

op numPxs : PExecS -> Nat .
eq numPxs(none) = 0 .
eq numPxs(px:PExec pxs) = s(numPxs(pxs)) .

op numMsgs : MsgS -> Nat .
eq numMsgs(none) = 0 .
eq numMsgs(msg1 msgs) = s(numMsgs(msgs)) .

crl[pstart] :
    [sid, i | pxs | prid prids' | rr(m) ]
    [iid, j | rr(l) | TRec ]
    pc @ tt(n) @ none ! msgs2 @ b ! b2 @ mks @ k ! n1
    =>
    [ sid, s i | px( UPR(prid, n1), iid, nid, rr(s s k) ) pxs | prid prids' | rr(s k)]
    [ iid, s j | rr(k) | TRec] pc @ tt(s n) @ none ! msgs2
    msg( tt(s n) + timeoutT ; UPR(prid, n1) <- terminate( rr(s s s s k) ) )
    msg(  tt(s n) + TRec ; UPR(prid, n1) <- recover(iid, rr(s s s k) ) )
    @ b3 ! b4 @ mks' @ s s s s s k ! s n1
    if < str, nid, rs1 > trsn := TFunction(prid, INIT)
    /\ q< rs2, timeoutT > := RFunction(prid, nid)
    /\ numPxs(pxs) < MAXPX
    --- /\ ((numPxs(pxs) >= 1 and numMsgs(msgs2) >= 1) or n == 4)
    /\ b3' := ((tt(s n) >= 0/1) and ( (tt(s n) >= tt(n)) and (b)))
    /\ b3'' := advanceTime(tt(s n),msgs2,b3')
    --- /\ b3'' := b3'
    /\ b3 := simplify(b3'')
    /\ b4' :=  ( ( rr(s s k) > 0) and
               ( ( rr(s s s k) === rs1 * rr(s s k) ) and
               ( ( rr(l) - rr(s s s k) === rr(k) ) and
               ( ( rr(k) >= 0 ) and
               ( ( rr(s s s s k) === rs2 * rr(s s k) ) and
               ( ( rr(m) - rr(s s s s k) === rr(s k) )  and
               (  (rr( s k) >= 0) and (b2))))))))
    /\ b4 := simplify(b4')
    /\ metaCheck(['EXE], toVarsB(b4))
    /\ metaCheck(['EXE], toVarsB(b3))
    /\ mks' := putMarker(       [ sid, s i | px( UPR(prid, n1), iid, nid, rr(s s k)) pxs | prid prids' | rr(s k)]
                                [ iid, s j | rr(k) | TRec] pc @ tt(s n) @ none ! msgs2
                                msg( tt(s n) + timeoutT ; UPR(prid, n1) <- terminate( rr(s s s s k) ) )
                                msg(  tt(s n) + TRec ; UPR(prid, n1) <- recover(iid, rr(s s s k) ) )
                                @ b3 ! b4 @ mks @ s s s s s k ! s n1        ) .

crl[pcontinue] :
  [sid, i | px(UPR(prid , n1), iid, nid, instances) pxs' | prids' | rr(m) ]
  [iid, j | rr(l) | TRec ]
  pc @ tt(n) @ none ! msgs2 msg(T ; UPR(prid, n1) <- terminate(rs') ) @ b ! b2 @ mks @ k ! n2
  =>
  [sid, s i | px(UPR(prid , n1), iid, nid2, instances) pxs' | prids' | rr( s k) ]
  [iid, s j | rr(k) | TRec ]
  pc @ tt(s n) @ none ! msgs2
  msg(tt(s n) + timeoutT ; UPR(prid, n1) <- terminate( rr(s s s k)  ) )
  msg( tt(s n) + TRec ; UPR(prid, n1) <- recover(iid, rr(s s k) )  )
  @ b3 ! b4 @ mks' @ s s s s s k ! n2
  if  < str, nid2, rs1  > trsn  := TFunction(prid, nid)
  /\  q< rs2, timeoutT > := RFunction(prid, nid2)
  /\  q< rs3, T1 > := RFunction(prid, nid)
  /\ b3' := (T > tt(s n) and ((tt(s n) >= 0/1) and ( (tt(s n) >= tt(n))  and (b))))
  /\ b3'' := advanceTime(tt(s n),msgs2,b3')
  --- /\ b3'' := b3'
  /\ b3 := simplify(b3'')
  /\ b4' :=  ( ( rr( s s k) === rs1 * instances) and
             ( ( rr(l) - rr(s s k) === rr(k) )  and
             ( ( rr(s s s k) === rs2 * instances ) and
             ( ( rr(s s s s k) === rs3 * instances ) and
            ( ( rr(m) - rr(s s s k) + rr(s s s s k) === rr(s k) ) and
             ( ( rr(k) >= 0 ) and
             ( ( rr(s k) >= 0 ) and (b2))))))))
  /\ b4 := simplify(b4')
  /\ metaCheck(['EXE], toVarsB(b4))
  /\ metaCheck(['EXE], toVarsB(b3))
  /\ mks' := putMarker(   [sid, s i | px(UPR(prid , n1), iid, nid, instances) pxs' | prids' | rr( s k) ]
                          [iid, s j | rr(k) | TRec ]
                          pc @ tt(s n) @ none ! msgs2
                          msg(tt(s n) + timeoutT ; UPR(prid, n1) <- terminate( rr(s s s k) )   )
                          msg( tt(s n) + TRec ; UPR(prid, n1) <- recover(iid, rr(s s k) ) )
                          @ b3 ! b4 @ mks @ s s s s s k ! n2 ) .

crl[ptimeout]:
    [sid, i | px( UPR(prid, n1), iid, nid, rSym) pxs' | prids' | rr(m) ]
    pc @ tt(n) @ msgs msg( T ; UPR(prid, n1) <- terminate( rs1 ) ) ! msgs2 @ b ! b2 @ mks @ k ! n2
    =>
    [sid, i | pxs' | prids' | rr(k) ]
    pc @ tt(n) @ msgs ! msgs2 @ b ! b4 @ mks' @ s k ! n2
    if b4' := ( (rr(m) + rs1 === rr(k) ) and (b2))
    --- /\ (numMsgs(msgs msgs2) >= 1 or n == 4)
    /\ b4 := simplify(b4')
    /\ metaCheck(['EXE], toVarsB(b4))
    /\ mks' := putMarker(  [sid, i | pxs' | prids' | rr(k) ]
                           pc @ tt(n) @ msgs ! msgs2 @ b ! b4 @ mks @ s k ! n2   ) .

crl[irecover] :
    [iid, j | rr(l) | TRec ]
    pc @ tt(n) @ msgs msg( T ; UPR(prid, n1) <- recover( iid, rs1 ) ) ! msgs2 @ b ! b2 @ mks @ k ! n2
    =>
    [iid, j | rr(k) | TRec ]
    pc @ tt(n) @ msgs ! msgs2 @ b ! b4 @ mks @ s k ! n2
    if b4' := ( (rr(l) + rs1 === rr(k)) and (b2))
    --- /\ (numMsgs(msgs msgs2) >= 1 or n == 4)
    /\ b4 := simplify(b4')
    /\ metaCheck(['EXE], toVarsB(b4)) .

crl[buff] :
    pc @ tt(n) @ none ! msgs msg(T ; uprid <- evt) @ b ! b2 @ mks  @ i ! j
    =>
    pc @ tt(s n) @ msgs2 ! msgs3 @ b3 ! b2 @ mks  @ i ! j
    if { msgs2 ; msgs3 } := checkMsg( msg(T ; uprid <- evt) , msgs, b, T)
    /\ b3' := ((tt(s n) >= 0/1) and ( (tt(s n) >= tt(n)) and ( (tt(s n) >= T) and (b))))
    --- /\ numMsgs( msgs2 ) == 1
    /\ b3'' := advanceTime(tt(s n), msgs3, b3')
    --- /\ b3'' := b3'
    /\ b3 := simplify(b3'')
    /\ metaCheck(['EXE], toVarsB(b3)) .

  sort MsgSDuple .
  op {_ ; _} : MsgS MsgS -> MsgSDuple [ctor] .

  op checkMsg : MsgS MsgS Boolean TSymReal -> MsgSDuple .
  ceq checkMsg(  msgs ,  msg(T1 ;  uprid  <- evt) msgs2 , b, T )
      = checkMsg( msgs msg(T1 ; uprid <- evt) , msgs2, b, T )
  if b2 := ((T1 > T) and (b))
  /\ not (metaCheck(['EXE], toVarsB(b2))) .

  eq checkMsg( msgs, msgs2, b, T ) = { msgs ; msgs2 } .

op goal : Config TSymReal -> Bool .
op goal : Config TSymReal RSymInt -> Bool .


eq goal(conf, T) = false  [owise] .
ceq goal( [sid, i | pxs | prids | rs1]
           pc @ T @ none ! msgs2 @ b ! b2 @ depleted(sid, rsil ,T3) mks @ k ! n2 , T1 ) = true
if b3' := ( ( T - T3 >= T1   ) and  (b) )
/\ b3'' := advanceTime(T,msgs2,b3')
--- /\ b3'' := b3'
/\ b3 := simplify(b3'')
/\ metaCheck(['EXE], toVarsB(b3)) .

endm



mod SLOWLORIS is
  inc EXE .

  ops initSlow1 initSlow2 initSlow3 initSlow4 initSlow5 : -> Config .

  eq rMin = 0 .
  eq MAXPX = 1 .

  op Threshold : -> TSymReal .
  eq Threshold = tw(3) .


 eq initSlow1 =   [ S(0), 0 | none | PR(1) | rr(3) ]
                  [ I(0), 0 | rr(4) | tw(2) ] @ tt(4) @ none ! none @
                 ( ( tt(4) >= 0/1   ) and
                 ( ( tw(1) === 12/1 ) and
                 ( ( tw(2) === 10/1 ) and
                 ( ( tw(3) === 2/1  ) and (true))))) !
                 ( ( rr(1) === 1  )  and
                 ( ( rr(2) === 1  )  and
                 ( ( rr(3) === 100 ) and
                 ( ( rr(4) === 100 ) and (true))))) @ none @ 5 ! 0 .

 eq initSlow2 =   [ S(0), 0 | none | PR(1) | rr(4) ]
                  [ I(0), 0 | rr(3) | tw(2) ] @ tt(4) @ none ! none @
                  ( ( tt(4) >= 0/1   ) and
                  ( ( tw(1) === 12/1 ) and
                  ( ( tw(2) === 10/1 ) and
                  ( ( tw(3) === 12/1  ) and (true))))) !
                  ( ( rr(1) === 1  )  and
                  ( ( rr(2) === 1  )  and
                  ( ( rr(3) === 100 ) and
                  ( ( rr(4) === 100 ) and (true))))) @ none @ 5 ! 0 .

 eq initSlow3 =   [ S(0), 0 | none | PR(1) | rr(4) ]
                  [ I(0), 0 | rr(3) | tw(2) ] @ tt(4) @ none ! none @
                  ( ( tt(4) >= 0/1   ) and
                  ( ( tw(1) === 12/1 ) and
                  ( ( tw(2) === 10/1 ) and
                  ( ( tw(3) === 23/1  ) and (true))))) !
                  ( ( rr(1) === 1  )  and
                  ( ( rr(2) === 1  )  and
                  ( ( rr(3) === 100 ) and
                  ( ( rr(4) === 100 ) and (true))))) @ none @ 5 ! 0 .

eq RFunction( PR(1), ND(0) ) = q< rr(1),  tw(1)  > .
eq RFunction( PR(1), ND(1) ) = q< rr(1),  tw(1)  > .

eq TFunction( PR(1),  INIT  ) = < "INIT", ND(0), rr(2) > .
eq TFunction( PR(1),  ND(0) ) = < "Incomplete", ND(0), rr(2)  >
                                < "Complete", ND(1), rr(2)    > .
eq TFunction( PR(1), ND(1) ) = none .

endm


mod VOIP is
  inc EXE .

  ops initVoip initVoip1 initVoip2 initVoip3 : -> Config .
  eq rMin = 0 .
  eq MAXPX = 1 .

  op Threshold : -> TSymReal .
  eq Threshold = tw(3) .


  eq initVoip1 =  [ S(0), 0 | none | PR(1) | rr(3) ]
                  [ I(0), 0 | rr(4) | tw(2) ] @ tt(4) @ none ! none @
                  ( ( tt(4) >= 0/1   ) and
                  ( ( tw(1) === 40/1 ) and
                  ( ( tw(2) === 1/1000 ) and
                  ( ( tw(3) > 0/1  ) and (true))))) !
                  ( ( rr(1) === 20  )  and
                  ( ( rr(2) === 1  )  and
                  ( ( rr(3) === 800 ) and
                  ( ( rr(4) === 20 ) and (true))))) @ none @ 5 ! 0 .

  eq initVoip2 =  [ S(0), 0 | none | PR(1) | rr(3) ]
                  [ I(0), 0 | rr(4) | tw(2) ] @ tt(4) @ none ! none @
                  ( ( tt(4) >= 0/1   ) and
                  ( ( tw(1) === 40/1 ) and
                  ( ( tw(2) === 1/1000 ) and
                  ( ( tw(3) > 0/1  ) and (true))))) !
                  ( ( rr(1) === 20  )  and
                  ( ( rr(2) === 1  )  and
                  ( ( rr(3) === 1200 ) and
                  ( ( rr(4) === 20 ) and (true))))) @ none @ 5 ! 0 .

  eq initVoip3 =  [ S(0), 0 | none | PR(1) | rr(3) ]
                  [ I(0), 0 | rr(4) | tw(2) ] @ tt(4) @ none ! none @
                  ( ( tt(4) >= 0/1   ) and
                  ( ( tw(1) === 40000/1 ) and
                  ( ( tw(2) === 2/1 ) and
                  ( ( tw(3) === 200000/1  ) and (true))))) !
                  ( ( rr(1) === 20  )  and
                  ( ( rr(2) === 1  )  and
                  ( ( rr(3) === 64000 ) and
                  ( ( rr(4) === 3500 ) and (true))))) @ none @ 5 ! 0 .

eq RFunction(PR(1), ND(0) ) = q< rr(1), tw(1) > .
eq RFunction(PR(1), ND(1) ) = q< rr(1), tw(1) > .
eq RFunction(PR(1), ND(2) ) = q< rr(1), tw(1) > .
eq RFunction(PR(1), ND(3) ) = q< rr(1), tw(1) > .
eq RFunction(PR(1), ND(4) ) = q< rr(1), tw(1) > .
eq RFunction(PR(1), ND(5) ) = q< rr(1), tw(1) > .

eq TFunction( PR(1), INIT  ) = < "INIT", ND(0), rr(2) > .
eq TFunction( PR(1), ND(0) ) = < "MSG1", ND(1), rr(2) > .
eq TFunction( PR(1), ND(1) ) = < "MSG2", ND(2), rr(2) > .
eq TFunction( PR(1), ND(2) ) = < "MSG3", ND(3), rr(2) > .
eq TFunction( PR(1), ND(3) ) = < "MSG4", ND(4), rr(2) > .
eq TFunction( PR(1), ND(4) ) = < "MSG5", ND(5), rr(2) > .
eq TFunction( PR(1), ND(5) ) = none .

endm


mod SLOWTCAM is
  inc EXE .

  ops initSlowTCAM1 initSlowTCAM2 initSlowTCAM3 : -> Config .

  op Threshold : -> TSymReal .
  eq Threshold = tw(3) .
  eq rMin = 0 .
  eq MAXPX = 2 .

--- MAXPX 2
  eq initSlowTCAM1 =  [ S(0), 0 | none | PR(1) | rr(3) ]
                  [ I(0), 0 | rr(4) | tw(2) ] @ tt(4) @ none ! none @
                  ( ( tt(4) >= 0/1   ) and
                  ( ( tw(1) === 10/1 ) and
                  ( ( tw(2) === 1/1 ) and
                  ( ( tw(3) >= 0/1  ) and (true))))) !
                  ( ( rr(1) === 1  )  and
                  ( ( rr(2) === 0  )  and
                  ( ( rr(3) === 30 ) and
                  ( ( rr(4) === 15 ) and (true))))) @ none @ 5 ! 0 .
--- MAXPX 3
 eq initSlowTCAM2 =  [ S(0), 0 | none | PR(1) | rr(3) ]
                     [ I(0), 0 | rr(4) | tw(2) ] @ tt(4) @ none ! none @
                     ( ( tt(4) >= 0/1   ) and
                     ( ( tw(1) === 10/1 ) and
                     ( ( tw(2) === 1/1 ) and
                     ( ( tw(3) >= 0/1  ) and (true))))) !
                     ( ( rr(1) === 1  )  and
                     ( ( rr(2) === 0  )  and
                     ( ( rr(3) === 45 ) and
                     ( ( rr(4) === 15 ) and (true))))) @ none @ 5 ! 0 .
--- MAXPX 4
eq initSlowTCAM3 =  [ S(0), 0 | none | PR(1) | rr(3) ]
                    [ I(0), 0 | rr(4) | tw(2) ] @ tt(4) @ none ! none @
                    ( ( tt(4) >= 0/1   ) and
                    ( ( tw(1) === 10/1 ) and
                    ( ( tw(2) === 1/1 ) and
                    ( ( tw(3) >= 0/1  ) and (true))))) !
                    ( ( rr(1) === 1  )  and
                    ( ( rr(2) === 0  )  and
                    ( ( rr(3) === 60 ) and
                    ( ( rr(4) === 15 ) and (true))))) @ none @ 5 ! 0 .

eq RFunction( PR(1), ND(0) ) = q< rr(1), tw(1) > .
eq RFunction( PR(1), ND(1) ) = q< rr(1), tw(1) > .

eq TFunction( PR(1), INIT  ) = < "INIT", ND(0), rr(1) > .
eq TFunction( PR(1), ND(0) ) = < "MSG1", ND(1), rr(1) >
                               < "MSG2", ND(0), rr(2) > .

eq TFunction( PR(1), ND(1)) = none .

endm

***(

srewrite[1] in SLOWLORIS : initSlow1 using pstart .

srewrite[1] in SLOWLORIS : initSlow1 using pstart ; pcontinue .

srewrite[1] in SLOWLORIS : initSlow1 using pstart ; pcontinue ; buff .

srewrite[1] in SLOWLORIS : initSlow1 using pstart ; pcontinue ; buff ; irecover .

srewrite[1] in SLOWLORIS : initSlow1 using pstart ; pcontinue ; buff ; irecover ; srecover .

srewrite[1] in SLOWLORIS : initSlow1 using pstart ; pcontinue ; buff ; irecover ; srecover ; ptimeout .

-------------------------------------------------------------------------------------------------------------------

search [1] in SLOWLORIS : initSlow1 =>* conf:Config    such that goal(conf:Config, Threshold) = (    true).Bool .

Solution 1 (state 10)
states: 11  rewrites: 14192 in 184ms cpu (182ms real) (77130 rewrites/second)
conf:Config --> ([I(0),2 | rr(11) | tw(2)] [S(0),2 | px(UPR(PR(1), 0), I(0),
  ND(0), rr(7)) | PR(1) | rr(12)]) @ tt(6) @ none ! msg(tt(6) + tw(1) ; UPR(
  PR(1), 0) <- terminate(rr(14))) msg(tt(6) + tw(2) ; UPR(PR(1), 0) <-
  recover(I(0), rr(13))) @ tt(5) + tw(1) > tt(6) and (tt(6) >= (0/1).Real and
  (tt(6) >= tt(5) and (tt(6) < tt(5) + tw(1) and (tt(6) >= (0/1).Real and (
  tt(6) >= tt(5) and (tt(6) >= tt(5) + tw(2) and (tt(5) >= (0/1).Real and (
  tt(5) >= tt(4) and (tt(4) >= (0/1).Real and (tw(1) === (12/1).Real and (tw(
  2) === (10/1).Real and (tw(3) === (2/1).Real and true)))))))))))) ! rr(13)
  === rr(2) * rr(7) and (rr(10) - rr(13) === rr(11) and (rr(14) === rr(1) *
  rr(7) and (rr(15) === rr(1) * rr(7) and (rr(6) - rr(14) + rr(15) === rr(12)
  and (rr(11) >= (0).Integer and (rr(12) >= (0).Integer and (rr(5) + rr(8)
  === rr(10) and (rr(7) > (0).Integer and (rr(8) === rr(2) * rr(7) and (rr(4)
  - rr(8) === rr(5) and (rr(5) >= (0).Integer and (rr(9) === rr(1) * rr(7)
  and (rr(3) - rr(9) === rr(6) and (rr(6) >= (0).Integer and (rr(1) === (
  1).Integer and (rr(2) === (1).Integer and (rr(3) === (100).Integer and (rr(
  4) === (100).Integer and true)))))))))))))))))) @ depleted(S(0), rr(6) ;
  rr(12), tt(5)) @ 16 ! 1


search [1] in SLOWLORIS : initSlow2 =>* conf:Config    such that goal(conf:Config, Threshold) = (    true).Bool .

Solution 1 (state 38)
states: 39  rewrites: 148696 in 1464ms cpu (1462ms real) (101568
    rewrites/second)
conf:Config --> ([I(0),3 | rr(17) | tw(2)] [S(0),3 | px(UPR(PR(1), 0), I(0),
    ND(0), rr(7)) | PR(1) | rr(18)]) @ tt(7) @ none ! msg(tt(7) + tw(1) ; UPR(
    PR(1), 0) <- terminate(rr(20))) msg(tt(7) + tw(2) ; UPR(PR(1), 0) <-
    recover(I(0), rr(19))) @ tt(6) + tw(1) > tt(7) and (tt(7) >= (0/1).Real and
    (tt(7) >= tt(6) and (tt(7) < tt(6) + tw(1) and (tt(7) >= (0/1).Real and (
    tt(7) >= tt(6) and (tt(7) >= tt(6) + tw(2) and (tt(5) + tw(1) > tt(6) and (
    tt(6) >= (0/1).Real and (tt(6) >= tt(5) and (tt(6) < tt(5) + tw(1) and (tt(
    6) >= (0/1).Real and (tt(6) >= tt(5) and (tt(6) >= tt(5) + tw(2) and (tt(5)
    >= (0/1).Real and (tt(5) >= tt(4) and (tt(4) >= (0/1).Real and (tw(1) === (
    12/1).Real and (tw(2) === (10/1).Real and (tw(3) === (12/1).Real and
    true))))))))))))))))))) ! rr(19) === rr(2) * rr(7) and (rr(16) - rr(19) ===
    rr(17) and (rr(20) === rr(1) * rr(7) and (rr(21) === rr(1) * rr(7) and (rr(
    12) - rr(20) + rr(21) === rr(18) and (rr(17) >= (0).Integer and (rr(18) >=
    (0).Integer and (rr(11) + rr(13) === rr(16) and (rr(13) === rr(2) * rr(7)
    and (rr(10) - rr(13) === rr(11) and (rr(14) === rr(1) * rr(7) and (rr(15)
    === rr(1) * rr(7) and (rr(6) - rr(14) + rr(15) === rr(12) and (rr(11) >= (
    0).Integer and (rr(12) >= (0).Integer and (rr(5) + rr(8) === rr(10) and (
    rr(7) > (0).Integer and (rr(8) === rr(2) * rr(7) and (rr(3) - rr(8) === rr(
    5) and (rr(5) >= (0).Integer and (rr(9) === rr(1) * rr(7) and (rr(4) - rr(
    9) === rr(6) and (rr(6) >= (0).Integer and (rr(1) === (1).Integer and (rr(
    2) === (1).Integer and (rr(3) === (100).Integer and (rr(4) === (
    100).Integer and true)))))))))))))))))))))))))) @ depleted(S(0), rr(6) ;
    rr(12) ; rr(18), tt(5)) @ 22 ! 1


search [1] in SLOWLORIS : initSlow3 =>* conf:Config    such that goal(conf:Config, Threshold) = (    true).Bool .

Solution 1 (state 38)
states: 39  rewrites: 148696 in 1484ms cpu (1484ms real) (100199
    rewrites/second)
conf:Config --> ([I(0),3 | rr(17) | tw(2)] [S(0),3 | px(UPR(PR(1), 0), I(0),
    ND(0), rr(7)) | PR(1) | rr(18)]) @ tt(7) @ none ! msg(tt(7) + tw(1) ; UPR(
    PR(1), 0) <- terminate(rr(20))) msg(tt(7) + tw(2) ; UPR(PR(1), 0) <-
    recover(I(0), rr(19))) @ tt(6) + tw(1) > tt(7) and (tt(7) >= (0/1).Real and
    (tt(7) >= tt(6) and (tt(7) < tt(6) + tw(1) and (tt(7) >= (0/1).Real and (
    tt(7) >= tt(6) and (tt(7) >= tt(6) + tw(2) and (tt(5) + tw(1) > tt(6) and (
    tt(6) >= (0/1).Real and (tt(6) >= tt(5) and (tt(6) < tt(5) + tw(1) and (tt(
    6) >= (0/1).Real and (tt(6) >= tt(5) and (tt(6) >= tt(5) + tw(2) and (tt(5)
    >= (0/1).Real and (tt(5) >= tt(4) and (tt(4) >= (0/1).Real and (tw(1) === (
    12/1).Real and (tw(2) === (10/1).Real and (tw(3) === (23/1).Real and
    true))))))))))))))))))) ! rr(19) === rr(2) * rr(7) and (rr(16) - rr(19) ===
    rr(17) and (rr(20) === rr(1) * rr(7) and (rr(21) === rr(1) * rr(7) and (rr(
    12) - rr(20) + rr(21) === rr(18) and (rr(17) >= (0).Integer and (rr(18) >=
    (0).Integer and (rr(11) + rr(13) === rr(16) and (rr(13) === rr(2) * rr(7)
    and (rr(10) - rr(13) === rr(11) and (rr(14) === rr(1) * rr(7) and (rr(15)
    === rr(1) * rr(7) and (rr(6) - rr(14) + rr(15) === rr(12) and (rr(11) >= (
    0).Integer and (rr(12) >= (0).Integer and (rr(5) + rr(8) === rr(10) and (
    rr(7) > (0).Integer and (rr(8) === rr(2) * rr(7) and (rr(3) - rr(8) === rr(
    5) and (rr(5) >= (0).Integer and (rr(9) === rr(1) * rr(7) and (rr(4) - rr(
    9) === rr(6) and (rr(6) >= (0).Integer and (rr(1) === (1).Integer and (rr(
    2) === (1).Integer and (rr(3) === (100).Integer and (rr(4) === (
    100).Integer and true)))))))))))))))))))))))))) @ depleted(S(0), rr(6) ;
    rr(12) ; rr(18), tt(5)) @ 22 ! 1

==========================================================================
VoIP

search [1] in VOIP : initVoip1 =>* conf:Config such that goal(conf:Config,  Threshold) = (true).Bool .

Solution 1 (state 357)
states: 358  rewrites: 2846859 in 28092ms cpu (28275ms real) (101340
    rewrites/second)
conf:Config --> ([I(0),3 | rr(17) | tw(2)] [S(0),3 | px(UPR(PR(1), 0), I(0),
    ND(0), rr(7)) px(UPR(PR(1), 1), I(0), ND(0), rr(13)) | PR(1) | rr(18)]) @
    tt(7) @ none ! msg(tt(6) + tw(1) ; UPR(PR(1), 1) <- terminate(rr(15))) msg(
    tt(7) + tw(1) ; UPR(PR(1), 0) <- terminate(rr(20))) msg(tt(7) + tw(2) ;
    UPR(PR(1), 0) <- recover(I(0), rr(19))) @ tt(7) < tt(6) + tw(1) and (tt(5)
    + tw(1) > tt(7) and (tt(7) >= (0/1).Real and (tt(7) >= tt(6) and (tt(7) <
    tt(5) + tw(1) and (tt(7) < tt(6) + tw(1) and (tt(7) >= (0/1).Real and (tt(
    7) >= tt(6) and (tt(7) >= tt(6) + tw(2) and (tt(6) < tt(5) + tw(1) and (tt(
    6) >= (0/1).Real and (tt(6) >= tt(5) and (tt(6) < tt(5) + tw(1) and (tt(6)
    >= (0/1).Real and (tt(6) >= tt(5) and (tt(6) >= tt(5) + tw(2) and (tt(5) >=
    (0/1).Real and (tt(5) >= tt(4) and (tt(4) >= (0/1).Real and (tw(1) === (
    40/1).Real and (tw(2) === (1/1000).Real and (tw(3) > (0/1).Real and
    true))))))))))))))))))))) ! rr(19) === rr(2) * rr(7) and (rr(16) - rr(19)
    === rr(17) and (rr(20) === rr(1) * rr(7) and (rr(21) === rr(1) * rr(7) and
    (rr(12) - rr(20) + rr(21) === rr(18) and (rr(17) >= (0).Integer and (rr(18)
    >= (0).Integer and (rr(11) + rr(14) === rr(16) and (rr(13) > (0).Integer
    and (rr(14) === rr(2) * rr(13) and (rr(10) - rr(14) === rr(11) and (rr(11)
    >= (0).Integer and (rr(15) === rr(1) * rr(13) and (rr(6) - rr(15) === rr(
    12) and (rr(12) >= (0).Integer and (rr(5) + rr(8) === rr(10) and (rr(7) > (
    0).Integer and (rr(8) === rr(2) * rr(7) and (rr(4) - rr(8) === rr(5) and (
    rr(5) >= (0).Integer and (rr(9) === rr(1) * rr(7) and (rr(3) - rr(9) ===
    rr(6) and (rr(6) >= (0).Integer and (rr(1) === (20).Integer and (rr(2) ===
    (1).Integer and (rr(3) === (800).Integer and (rr(4) === (20).Integer and
    true)))))))))))))))))))))))))) @ depleted(S(0), rr(12) ; rr(18), tt(6)) @
    22 ! 2

search [1] in VOIP : initVoip2 =>* conf:Config such that goal(conf:Config,  Threshold) = (true).Bool .

OVERFLOW

search [1] in VOIP : initVoip3 =>* conf:Config such that goal(conf:Config,    Threshold) = (true).Bool .

red advanceTime(tt(100), msg(tt(6) + tw(1) ;    PR(1),0 <- timeout(rr(15), rr(13))) msg(tt(6) + tw(    2) ; PR(1),0 <- recover(S(0), rr(14))) msg(tt(6) +    tw(4) ; PR(1),0 <- recover(I(0), rr(12))), true ) .

=========================================================
SlowTCAM

search [1] in SLOWTCAM : initSlowTCAM1 =>* conf:Config such that goal(conf:Config,Threshold) = (true).Bool .

Solution 1 (state 69)
states: 70  rewrites: 128674 in 1404ms cpu (1413ms real) (91648
    rewrites/second)
conf:Config --> ([I(0),2 | rr(11) | tw(2)] [S(0),2 | px(UPR(PR(1), 0), I(0),
    ND(0), rr(7)) px(UPR(PR(1), 1), I(0), ND(0), rr(13)) | PR(1) | rr(12)]) @
    tt(6) @ none ! msg(tt(5) + tw(1) ; UPR(PR(1), 0) <- terminate(rr(9))) msg(
    tt(6) + tw(1) ; UPR(PR(1), 1) <- terminate(rr(15))) msg(tt(6) + tw(2) ;
    UPR(PR(1), 1) <- recover(I(0), rr(14))) @ tt(6) < tt(5) + tw(1) and (tt(6)
    >= (0/1).Real and (tt(6) >= tt(5) and (tt(6) < tt(5) + tw(1) and (tt(6) >=
    (0/1).Real and (tt(6) >= tt(5) and (tt(6) >= tt(5) + tw(2) and (tt(5) >= (
    0/1).Real and (tt(5) >= tt(4) and (tt(4) >= (0/1).Real and (tw(1) === (
    10/1).Real and (tw(2) === (1/1).Real and (tw(3) >= (0/1).Real and
    true)))))))))))) ! rr(13) > (0).Integer and (rr(14) === rr(1) * rr(13) and
    (rr(10) - rr(14) === rr(11) and (rr(11) >= (0).Integer and (rr(15) === rr(
    1) * rr(13) and (rr(6) - rr(15) === rr(12) and (rr(12) >= (0).Integer and (
    rr(5) + rr(8) === rr(10) and (rr(7) > (0).Integer and (rr(8) === rr(1) *
    rr(7) and (rr(4) - rr(8) === rr(5) and (rr(5) >= (0).Integer and (rr(9) ===
    rr(1) * rr(7) and (rr(3) - rr(9) === rr(6) and (rr(6) >= (0).Integer and (
    rr(1) === (1).Integer and (rr(2) === (0).Integer and (rr(3) === (
    30).Integer and (rr(4) === (15).Integer and true)))))))))))))))))) @
    depleted(S(0), rr(12), tt(6)) @ 16 ! 2

search [1] in SLOWTCAM : initSlowTCAM2 =>* conf:Config such that goal(conf:Config,Threshold) = (true).Bool .

)
